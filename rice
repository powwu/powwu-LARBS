#!/bin/sh

### ----- SETTINGS ----- ###

echo "Do you wish to install this program?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) make install; break;;
        No ) exit;;
    esac
done

## Change the values accordingly.
DPI=100;

## BOOLEANS: Comment out settings that you don't want applied.
# Install new bootloader Limine. Will create a new default EFI entry. May only work automated if you have a /boot partition.
export INSTALL_LIMINE

# Use swap with LIMINE params (requires that swap be mounted already, double check!)
export SWAPON

# Use chaotic-aur (does not affect using normal aur)
export CHAOTIC_AUR

# Automatic login
export AUTOLOGIN

# Mark settings as reviewed; uncomment me to continue
#export SETTINGS_COMPLETED


### ----- END SETTINGS ----- ###


# error function
error() { printf "\n\n%s\n" "$1" >&2; exit 1; }


manualinstall() { # Installs $1 manually. Used only for AUR helper here.
	  sudo -u "$name" mkdir -p "$repodir/$1"
	  sudo -u "$name" git clone --depth 1 "https://aur.archlinux.org/$1.git" "$repodir/$1" >/dev/null 2>&1 ||
		    { cd "$repodir/$1" || return 1 ; sudo -u "$name" git pull --force origin master;}
	  cd "$repodir/$1"
	  sudo -u "$name" -D "$repodir/$1" makepkg --noconfirm -si >/dev/null 2>&1 || return 1
}

maininstall() {
	  pacman -S --noconfirm --needed "$1" || sudo -u "$name" yay -S --noconfirm --needed "$1"
}

installationloop() {
	  ([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^#/d' > /tmp/progs.csv
	  total=$(wc -l < /tmp/progs.csv)
	  aurinstalled=$(pacman -Qqm)
	  while IFS=, read -r tag program comment; do
		    n=$((n+1))
		    echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		    case "$tag" in
			      "G") gitmakeinstall "$program" "$comment" ;;
			      "P") pipinstall "$program" "$comment" ;;
			      *) maininstall "$program" "$comment" ;;
		    esac
	  done < /tmp/progs.csv ;
}

chaoticaur() {
	  pacman-key --recv-key FBA220DFC880C036 --keyserver keyserver.ubuntu.com
    pacman-key --lsign-key FBA220DFC880C036
    pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
    echo "\n[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist" >> /etc/pacman.conf
}

autologin() {
    mkdir /etc/systemd/system/getty@tty1.service.d/
    echo "[Service]
ExecStart=
ExecStart=-/usr/bin/mingetty --autologin $name --noclear %I $TERM" > /etc/systemd/system/getty@tty1.service.d/override.conf
}

install_limine() {
    BOOT_DEVICE=$(eval $(lsblk -oMOUNTPOINT,PKNAME -P | grep 'MOUNTPOINT="/boot"'); echo $PKNAME)
    ROOT_PARTUUID=$(eval $(lsblk -oMOUNTPOINT,PARTUUID -P | grep 'MOUNTPOINT="/"'); echo $PARTUUID)
    SWAP=""
    [[ -v SWAPON ]] && SWAP=$(eval $(lsblk -oMOUNTPOINT,PARTUUID -P | grep 'MOUNTPOINT="\[SWAP\]"'); echo $PARTUUID | /bin/xargs /bin/echo "resume=PARTUUID=" | /bin/sed 's/\s*//g')
    cp /usr/share/limine/limine.sys /boot/
    limine-deploy $BOOT_DEVICE
    mkdir /boot/EFI/BOOT/
    cp /usr/share/limine/BOOTX64.EFI /boot/EFI/BOOT/
    echo "TIMEOUT=0

:Arch Linux
    PROTOCOL=linux
    KERNEL_PATH=boot:///vmlinuz-linux
    CMDLINE=root=PARTUUID=$ROOT_PARTUUID $SWAP rw ibt=off
    MODULE_PATH=boot:///initramfs-linux.img" > /boot/limine.cfg
}

config() {
    # beep no more
    rmmod pcspkr
    echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf

    # zsh as default shell
    chsh -s /bin/zsh "$name" >/dev/null 2>&1
    sudo -u "$name" mkdir -p "/home/$name/.cache/zsh/"

    # dbus stuff
    dbus-uuidgen > /var/lib/dbus/machine-id
    echo "export \$(dbus-launch)" > /etc/profile.d/dbus.sh

    # tap to click
    [ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && printf 'Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        # Enable left mouse button by tapping
        Option "Tapping" "on"
        EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf

    # fluidsynth pulseaudio fix
    grep -q "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" /etc/conf.d/fluidsynth || echo "OTHER_OPTS='-a pulseaudio -m alsa_seq -r 48000'" >> /etc/conf.d/fluidsynth

    # start pulseaudio (really pipewire but yknow)
    pkill -15 -x 'pulseaudio'; sudo -u "$name" pulseaudio --start

    # enable autologin
    [[ -v AUTOLOGIN ]] && autologin

    # make needed groups
    groups=("$name" "audio" "input" "vboxusers" "video")
    for g in "${groups[@]}"
    do
        groupadd $g
        sudo usermod -a -G $g $name
    done

    # register commonly used folders
    mkdir /home/$name/{Downloads,Documents,Games,Projects,Music,Screenshots}

    # make sure that the home folder is owned completely
    sudo chown -R $name:$name /home/$name/

    # install spacemacs
    git clone https://github.com/syl20bnr/spacemacs /home/$name/.emacs.d

    # wallpaper/pywal config
    pywalfox install
    git clone https://github.com/powwu/wallpapers.git /home/$name/Wallpapers
    cd /home/$name/Wallpapers && 7z x wallpapers.7z.001 -pFTQmDd3rd6PxcKgF328C3N6XnzUW63PFiFd

    # automatic mirror refreshing
    systemctl enable reflector

    # network tingz
    systemctl enable wpa_supplicant connman

    # configure power button behavior
    xconf-query -c xfce4-power-manager -p /xfce4-power-manager/power-button-action -s 3

    # configure fingerprint reader
    files=("system-login" "system-local-login" "sudo")
    for f in files
    do
        # these commands are in reverse order of the final file, as they are each prepended
        sed -i '1 a\auth   	sufficient  	pam_unix.so try_first_pass nullok' /etc/pam.d/$f
        sed -i '1 a\auth    sufficient      pam_fprintd_grosshack.so' /etc/pam.d/$f
    done

    # configure mirrorlist
    systemctl enable --now reflector

    # configure default apps
    xdg-mime default thunderbird.desktop x-scheme-handler/mailto
    xdg-mime default thunderbird.desktop x-scheme-handler/mid
    xdg-mime default nomacs.desktop image/png
    xdg-mime default nomacs.desktop image/jpeg
    xdg-mime default nemo.desktop inode/directory
    xdg-mime default thunderbird.desktop message/rfc822
    xdg-mime default firefox.desktop x-scheme-handler/http
    xdg-mime default firefox.desktop x-scheme-handler/https
    xdg-mime default emacs.desktop text/plain

    # give accts write permissions to spotify files
    sudo chmod a+wr /opt/spotify
    sudo chmod a+wr /opt/spotify/Apps -R

    # make sure that all files in $PATH (that useracc has access to) are executable
    PATH=$(sudo -u $name zsh -c 'echo $PATH') # single quotes to not evaluate $PATH right away
    echo $PATH | tr ":" "\n" | while read -r line; do sudo chmod -x -R $line; done

    # make sure power button keycodes can go through
    sudo sed -i 's/#HandlePowerKey=poweroff/HandlePowerKey=ignore/' /etc/systemd/logind.conf
    sudo sed -i 's/#PowerKeyIgnoreInhibited=no/PowerKeyIgnoreInhibited=yes/' /etc/systemd/logind.conf

    # install limine
    [[ -v INSTALL_LIMINE ]] && install_limine
}

# check for root & update system
printf "Updating package repositories, please wait...\n\n"
pacman --noconfirm --needed -Syy git > /dev/null || error "Are you sure you're running this as the root user, are on an Arch-based distribution and have an internet connection?"

# get username and password for the new user
read -p 'New Username: ' name
read -sp 'New Password: ' pass1
printf "\n"
read -sp 'Retype password: ' pass2
[[ "$pass1" = "$pass2" ]] || error "Passwords do not match, exiting."


# final chance to cancel
printf "\n\n\033[0;31mThis is your final chance to exit before making changes to your system. To exit, press CTRL-C (C-c) now. Automatically continuing in 20 seconds..."
sleep 20

# start timer
start=$SECONDS

# refreshing keyring
case "$(readlink -f /sbin/init)" in
		*systemd* )
			  pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1
			  ;;
		*)
			  pacman --noconfirm --needed -S artix-keyring artix-archlinux-support >/dev/null 2>&1
			  for repo in extra community multilib; do
				    grep -q "^\[$repo\]" /etc/pacman.conf ||
					      echo "[$repo]
Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
			  done
			  pacman-key --populate archlinux
			  ;;
esac;

# create user
useradd -m -g wheel -s /bin/zsh "$name" >/dev/null 2>&1
echo "$name:$pass1" | chpasswd
unset pass1 pass2

# clone repo as users home folder
git clone https://github.com/powwu/rice "/home/$name"
usermod -a -G wheel "$name" && chown "$name":wheel /home/"$name"
export repodir="/home/$name/"; mkdir -p "$repodir"; chown -R "$name":wheel "$(dirname "$repodir")"
export progsfile="$repodir/progs.csv"

# Make pacman colorful, concurrent downloads (no powerpill needed) and Pacman eye-candy.
grep -q "ILoveCandy" /etc/pacman.conf || sed -i "/#VerbosePkgLists/a ILoveCandy" /etc/pacman.conf
sed -i "s/^#ParallelDownloads = 8$/ParallelDownloads = 5/;s/^#Color$/Color/" /etc/pacman.conf

# add chaotic aur
[[ -v CHAOTIC_AUR ]] && chaoticaur

# Use all cores for compilation.
sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf

# install yay
manualinstall yay

# install packages
installationloop

# configure system
configure

# read timer
duration=$(( SECONDS - start ))

fprint "\n\nInstallation completed in $duration seconds."
